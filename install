#!/bin/bash
############################
# install
#
# Install dotfiles and other configurations files.
# Check if certain basic tools are installed, and install them if they aren't.
#
############################
set -euo pipefail

DOTFILES="${HOME}/dotfiles"
LOCAL="${HOME}/.local"
BACKUP="${LOCAL}/share/dotfiles_backup"
BIN="${LOCAL}/bin"
SHARE="${LOCAL}/share"
[ -d "${BIN}" ] || mkdir -p "${BIN}"
[ -d "${SHARE}" ] || mkdir -p "${SHARE}"

case "${OSTYPE}" in
    linux*) os="linux" ;;
    darwin*) os="mac" ;;
esac

## DEFINE COLORS
# probably don't change these
if [ -x "$(command -v tput)" ]; then
	bold="$(tput bold)"
	black="$(tput setaf 0)"
	red="$(tput setaf 1)"
	green="$(tput setaf 2)"
	yellow="$(tput setaf 3)"
	blue="$(tput setaf 4)"
	magenta="$(tput setaf 5)"
	cyan="$(tput setaf 6)"
	white="$(tput setaf 7)"
	reset="$(tput sgr0)"
fi

# you can change these
good="${reset}${bold}${green}"
bad="${reset}${bold}${red}"
info="${reset}"
c1="${reset}${cyan}"
c2="${reset}${magenta}"
c3="${reset}${yellow}"

# Confirm installation
installp() {
    local answer=""
    local prompt="Do you wish to install '$@'? y(es)/n(o)"
    echo ""
    while [[ ! ${answer} =~ y(es)?|n(o)? ]]; do
        read -n 1 -p "${prompt}" answer
    done
    case ${answer} in
        y*) echo " -> installing $@"; true ;;
        n*) echo " ... okay then"; false ;;
    esac
}

# Ensure that a downloadable binary is executable, else install it
ensure_bin() {
    [ -x "$1" ] || (echo "Installing $1 from $2" && curl -sSf "$2" -o "$1" && chmod u+x "$1")
}


# Install the dotfiles passed as arguments
#
# Move any existing dotfiles in homedir to dotfiles_old directory,
# then create symlinks from the homedir to any files in the
# ~/dotfiles directory specified in ${files}
install_dotfiles () {
    echo -e "\n\n"
    echo ">>>>>>>>>>>>>>>"
    echo "Installing dotfiles: $@"
    for file; do
        local target="${DOTFILES}/${file}"
        if [ ! -f "${target}" ] && [ ! -d "${target}" ]; then
            echo "WARNING: File '${target}' does not exist. Skipping."
            continue
        fi
        local linkname="${HOME}/.${file}"
        local linkdir="${linkname%/*}"
        echo "${file}:"
        if [ -L "${linkname}" ]; then
            echo -e "\tRemoving old symlink."
            rm "${linkname}"
        fi
        if [ -f "${linkname}" ] || [ -d "${linkname}" ]; then
            echo -e "\tBacking-up existing file."
            mkdir -p "${BACKUP}/${file%/*}"
            mv -v "${linkname}" "${BACKUP}/${file}"
        fi
        [ -d "${linkdir}" ] || mkdir -p "${linkdir}"
        echo -e "\tCreating symlink: $(ln -v -s ${target} ${linkname})"
    done
}


# ~/.local/bin
# ============
install_dotfiles local/bin/bashbot local/bin/pipedream
ensure_bin "${BIN}/git-jump" https://raw.githubusercontent.com/git/git/master/contrib/git-jump/git-jump

# Helper functions
# ================
install_dotfiles local/lib/bash_functions

# Bash
# ====
install_dotfiles bash_aliases inputrc
[ ${os} = "mac" ] && install_dotfiles bash_profile bashrc

# Tmux
# ====
install_dotfiles tmux.conf

# Alacritty
# =========
install_dotfiles config/alacritty/alacritty.yml

# VSCode
# ======
install_dotfiles config/Code/User/settings.json

# Git
# ===
install_dotfiles \
    git_template \
    gitconfig \
    gitignore

# Vim
# ===
install_dotfiles \
    vim \
    vimrc \
    gvimrc \
    config/nvim

# Ctags
# =====
install_dotfiles \
    ctags \
    ctags.d

# Fonts
# =====
install_dotfiles \
    local/share/fonts/iosevka \
    local/share/fonts/monoid

# Linux / Ubuntu
# ==============
if [ ${os} = "linux" ]; then
    installp "System Packages" && sudo apt install -y $(cat ${DOTFILES}/packages/{essentials,basics,extras})
    installp "Neovim" &&
        rm -f "${BIN}/nvim" &&
        curl -fsSL https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage -o "${BIN}/nvim" &&
        chmod u+x "${BIN}/nvim"
fi

# Crawl
# =====
if [ ${os} = "linux" ]; then
    install_dotfiles crawlrc

    crawld="${SHARE}/crawl"
    [ -d "${crawld}" ] || mkdir "${crawld}"
    if [ ! -f "${crawld}/icon.png" ]; then
        echo "  Installing Crawl icon"
        ln -s "${DOTFILES}/crawl/stone_soup_icon-512x512.png" "${crawld}/icon.png"
    fi
    if [ ! -f "${SHARE}/applications/crawl-online.desktop" ]; then
        echo "  Installing desktop app for Crawl Online"
        sudo cp "${DOTFILES}/crawl/crawl-online.desktop" "${SHARE}/applications/crawl-online.desktop"
    fi
    if [ ! -f "${SHARE}/applications/crawl-trunk.desktop" ] && [ -x /usr/local/bin/crawl ]; then
        echo "  Installing desktop app for Crawl Trunk"
        sudo cp "${DOTFILES}/crawl/crawl-trunk.desktop" "${SHARE}/applications/crawl-trunk.desktop"
    fi
    if [ ! -f "${crawld}"/cao_key ]; then
        echo "  Downloading Crawl CAO Key for online play"
        curl https://crawl.develz.org/cao_key 2>/dev/null > "${crawld}/cao_key" && chmod 600 "${crawld}/cao_key"
    fi

    echo "Happy crawling!"
fi

# Brogue
# ======
if [ ${os} = "linux" ]; then
    echo "Install Brogue CE"
    brogued="${SHARE}/brogue_ce"
    if [ !  -d "${brogued}" ]; then
        mkdir -p "${brogued}"
        pushd "${brogued}"
        curl -sSfL "https://github.com/tmewett/BrogueCE/releases/download/v1.8.3/BrogueCE-1.8.3-linux-x86_64.tar.gz" -o brogue_ce.tar.gz
        tar -xzf brogue_ce.tar.gz
        rm brogue_ce.tar.gz
        popd
    fi
    if [ ! -f "${SHARE}/applications/brogue.desktop" ]; then
        "${brogued}/make-link-for-desktop.sh"
        mv "${brogued}/brogue.desktop" "${SHARE}/applications/"
    fi

fi

echo
echo "${good}All done!${reset}"
echo
