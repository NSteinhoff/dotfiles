" Split path into directory and filename
function s:pathsplit(fpath)
    let fpath = expand(a:fpath)
    return [fnamemodify(fpath, ':p:h'), fnamemodify(fpath, ':t')]
endfunction

" Get revisions in current file's repo
function commander#git#local_revisions(...)
    let [fdir, _] = s:pathsplit(a:0 ? a:1 : '%')
    return systemlist('git -C ' . shellescape(fdir) . ' log --format=%h\ %s\ \(%ar\)')
endfunction

" Get revisions
function commander#git#global_revisions()
    return systemlist('git -C ' . shellescape(getcwd()) . ' log --format=%h\ %s\ \(%ar\)')
endfunction

" Get revisions for a file
function commander#git#file_revisions(...)
    let [fdir, fname] = s:pathsplit(a:0 ? a:1 : '%')
    return systemlist('git -C ' . shellescape(fdir) . ' log --no-patch --format=%h\ %s\ \(%ar\) -- ' . fname)
endfunction

" Get revisions for lines in a file
function commander#git#line_revisions(line1, line2, ...)
    let [fdir, fname] = s:pathsplit(a:0 ? a:1 : '%')
    return systemlist('git -C ' . shellescape(fdir) . ' log -L '.a:line1.','.a:line2.':'.fname.' --no-patch --format=%h\ %s\ \(%ar\)')
endfunction

" Show a local revision
function commander#git#local_revision(revision, ...)
    let ref = (a:revision != '' ? split(a:revision)[0] : 'HEAD')
    let [fdir, _] = s:pathsplit(a:0 ? a:1 : '%')
    return systemlist('git -C '.shellescape(fdir).' show '.ref)
endfunction

" Show a file revision
function commander#git#local_file_revision(revision, ...)
    let [fdir, fname] = s:pathsplit(a:0 ? a:1 : '%')
    let ft = &ft
    let ref = (a:revision != '' ? split(a:revision)[0] : 'HEAD')
    return = systemlist('git -C '.shellescape(fdir).' show '.ref.':./'.fname)
endfunction

function commander#git#load_diff_in_split(revision, ...)
    let content = call('commander#git#local_file_revision', [revision] + a:000)
    let ft = &ft
    call commander#lib#load_lines_in_split(content, 'vertical')
    let title = (a:revision != '' ? a:revision : 'HEAD')
    execute 'file '.title
    let &ft=ft
    au BufWipeout <buffer> diffoff!
    diffthis | wincmd p | diffthis | wincmd p
endfunction

function commander#git#load_patch(revision, ...) abort
    let [fdir, fname] = s:pathsplit(a:0 ? a:1 : '%')
    let ref = (a:revision != '' ? split(a:revision)[0] : 'HEAD')
    let title = (a:revision != '' ? a:revision : 'HEAD')
    let content = systemlist('git -C '.shellescape(fdir).' diff '.ref.' -- '.fname)
    call commander#lib#load_lines(content)
    execute 'file '.expand('#').'.'.title
    set ft=diff
endfunction

function commander#git#load_timeline(...)
    let [fdir, fname] = s:pathsplit(a:0 ? a:1 : '%')
    let content = call('commander#git#line_revisions', a:000)
    call commander#lib#load_lines(content)
    let b:fpath = fdir.'/'.fname
    execute 'file '.b:fpath.'.timeline'
    set ft=gitlog
endfunction

function commander#git#load_revision(revision)
    let content = commander#git#local_revision(a:revision)
    call commander#lib#load_lines(content)
    set ft=git
endfunction

function commander#git#load_revision_in_split(revision)
    let content = commander#git#local_revision(a:revision)
    call commander#lib#load_lines_in_split(content, 'vertical')
    set ft=git
endfunction

function commander#git#set_changed_args()
    let cwd = getcwd()
    let gitdir = finddir('.git', ';')
    if gitdir == ''
        return
    endif
    let gitroot = fnamemodify(gitdir, ':h')
    let changed = systemlist('git diff --name-only -- .')
    let absolute = map(changed, { k, v -> gitroot.'/'.v })
    let relative = map(absolute, { k, v ->
                \ match(v, cwd) ? strcharpart(v, matchend(v, cwd) + 1) : v
                \ })
    let filepaths = filter(relative, { k, v -> findfile(v) != '' })
    %argd
    for path in filepaths
        execute 'argadd '.path
    endfor
endfunction
