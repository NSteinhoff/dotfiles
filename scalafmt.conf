
// Scalafmt configuration
// ======================
// Using mostly the default values plus some reasonable rewrite rules.
//
// Check out additional options here:
// https://scalameta.org/scalafmt/docs/configuration.html


// Alignment
// =========
// The default ('some') is to align the '=>' in case statements.
// Set it to 'none' to disable.
// align = none

// Line Length
// ===========
// The default line length is 80 columns, which fits nicely on a split
// laptop screen. This will make people happy who like to look at files
// side-by-side.
//                                                                       80 -> |
//                                                                                          100 -> |
//                                                                                                              120 -> |
maxColumn = 79

// Rewrite Rules
// =============
rewrite.rules = []

// ExpandImportSelectors
//     Before:
//         import a.{
//             b,
//             c
//           }, h.{
//             k, l
//           }
//         import d.e.{f, g}
//         import a.{
//             foo => bar,
//             zzzz => _,
//             _
//           }
//
//     After:
//         import a.b
//         import a.c
//         import h.k
//         import h.l
//         import d.e.f
//         import d.e.g
//         import a.{foo => bar, zzzz => _, _}
rewrite.rules += ExpandImportSelectors

// PreferCurlyFors
//     Before:
//         for(a <- as; b <- bs if b > 2)
//           yield (a, b)
//
//     After:
//         for {
//           a <- as
//           b <- bs if b > 2
//         } yield (a, b)
rewrite.rules += PreferCurlyFors

// RedundantBraces
//     Before:
//         def foo = {
//           List(1, 2, 3).sum
//         }
//
//     After:
//         def foo =
//           List(1, 2, 3).sum
rewrite.rules += RedundantBraces

// RedundantParens
//     Before:
//         for {
//           a <- b
//           if (a.nonEmpty)
//         } yield a
//
//     After:
//         for {
//           a <- b
//           if a.nonEmpty
//         } yield a
rewrite.rules += RedundantParens

// SortImports
//     Before:
//         import foo.{Zilch, bar, Random, sand}
//         ï¿¼
//     After:
//         import foo.{bar, sand, Random, Zilch}
// rewrite.rules += SortImports

// SortModifiers
//     Before:
//         final lazy private implicit val x = 42
//         lazy final implicit private val y = 42
//
//     After:
//         implicit final private lazy val x = 42
//         implicit final private lazy val y = 42
rewrite.rules += SortModifiers

align.openParenDefnSite = false

continuationIndent.defnSite = 2

assumeStandardLibraryStripMargin = true

optIn.configStyleArguments = true
